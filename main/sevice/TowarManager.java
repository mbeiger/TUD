package main.sevice;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import main.domain.Towar;

public class TowarManager {
	
		private String CREATE_TABLE_TOWAR = "CREATE TABLE Towar(id_towar integer unique GENERATED BY DEFAULT AS IDENTITY, model varchar(255), liczba integer, cena float, id_producent integer)";
		private String ALTER_TABLE_TOWAR = "ALTER TABLE Towar ADD CONSTRAINT idfk FOREIGN KEY (id_producent) REFERENCES Producent(id_producent) ON DELETE CASCADE";
		private PreparedStatement addTowarStmt; // zmienne ktore beda wywolywac zapytania
		private PreparedStatement deleteAllTowarStmt;
		private PreparedStatement getAllTowarStmt;
		private PreparedStatement deleteOneTowarStmt;
		private PreparedStatement updateOneTowarStmt;
		private PreparedStatement deleteProducentFromTowarStmt;
		private PreparedStatement getTowarWithProdStmt;
		private Conn connectionManager = new Conn();
		private Connection connect;

		private Statement statement;
		
		public TowarManager(){
			try {
				
				connect = connectionManager.getConnection(); // laczenie
				statement = connect.createStatement();
				ResultSet rs = connect.getMetaData().getTables(null, null, null, null); // spr czy tabela towar istnieje
				boolean tableExists = false;
				while (rs.next()) {
					if ("Towar".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
						tableExists = true;
						break;
					}
				}
		
				if (!tableExists){ // jesli nie, to ja tworze
					statement.executeUpdate(CREATE_TABLE_TOWAR);
					statement.executeUpdate(ALTER_TABLE_TOWAR);
				}
				
				addTowarStmt = connect.prepareStatement("INSERT INTO Towar (model, liczba, cena, id_producent) VALUES (?, ?, ?, ?)");
				getAllTowarStmt = connect.prepareStatement("SELECT id_towar,model,liczba,cena,id_producent FROM Towar");
				deleteAllTowarStmt = connect.prepareStatement("DELETE FROM Towar");
				deleteOneTowarStmt =  connect.prepareStatement("DELETE FROM Towar WHERE id_towar=?");
				updateOneTowarStmt = connect.prepareStatement("UPDATE Towar SET model=?, liczba=?, cena=?, id_producent=? WHERE id_towar=?");
				deleteProducentFromTowarStmt = connect.prepareStatement("UPDATE Towar SET id_producent=null WHERE model=?");
				getTowarWithProdStmt = connect.prepareStatement("SELECT id_towar,model,liczba,cena,id_producent FROM Towar LEFT JOIN Producent ON Towar.id_producent=Producent.id_producent WHERE Producent.przedsiebiorstwo=?");
			} catch (SQLException ex){
				ex.printStackTrace();
			}
		}
		
		
		
		public void deleteOneTowar(Towar towarTabela){
			try {
				deleteOneTowarStmt.setInt(1, towarTabela.getIdTowar());
				deleteOneTowarStmt.executeUpdate();
					
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		public int updateOneTowar(Towar towar1, Towar towar2){
			try {
				updateOneTowarStmt.setString(1, towar1.getModel());
				updateOneTowarStmt.setInt(2, towar1.getLiczba());
				updateOneTowarStmt.setFloat(3, towar1.getCena());
				updateOneTowarStmt.setInt(4, towar1.getIdProducent());
				updateOneTowarStmt.setInt(5, towar2.getIdTowar());
				updateOneTowarStmt.executeUpdate();
				
				return 1;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		
		public int addTowar(Towar towar){
			int count = 0;
			try {
				addTowarStmt.setString(1, towar.getModel());
				addTowarStmt.setInt(2, towar.getLiczba());
				addTowarStmt.setFloat(3, towar.getCena());
				addTowarStmt.setInt(4, towar.getIdProducent());
				
				count = addTowarStmt.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return count;
		}
		
		public void deleteAllTowar(){
			try {
				deleteAllTowarStmt.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		public int deleteProducentFromTowar(String model){
			try {
				deleteProducentFromTowarStmt.setString(1,model);
				deleteProducentFromTowarStmt.executeUpdate();
				return 1;
			} catch (SQLException e) {
				e.printStackTrace();
				return 0;
			}
		}
		
		public List<Towar> getTowarWithProd(String producent){ // pobiera towary konkretnego producenta
			List<Towar> towary = new ArrayList<Towar>();
			try {
				getTowarWithProdStmt.setString(1, producent);
				ResultSet rs = getTowarWithProdStmt.executeQuery();

				while (rs.next()) {
					Towar towar = new Towar();
					towar.setIdTowar(rs.getInt("id_towar"));
					towar.setModel(rs.getString("model"));
					towar.setLiczba(rs.getInt("liczba"));
					towar.setCena(rs.getFloat("cena"));
					towar.setIdProducent(rs.getInt("id_producent"));
					towary.add(towar);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return towary;
		}
		
		public List<Towar> getAllTowar(){ // pobiera wszystkie towary
			List<Towar> towary = new ArrayList<Towar>();
			try {
				ResultSet rs = getAllTowarStmt.executeQuery();

				while (rs.next()) {
					Towar towar = new Towar();
					towar.setIdTowar(rs.getInt("id_towar"));
					towar.setModel(rs.getString("model"));
					towar.setLiczba(rs.getInt("liczba"));
					towar.setCena(rs.getFloat("cena"));
					towar.setIdProducent(rs.getInt("id_producent"));
					towary.add(towar);
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return towary;
		}
}